import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'bitwiseAnd' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER N
     *  2. INTEGER K
     */

    public static int bitwiseAnd(int N, int K) {
    // Write your code here
       {
        int s[]=new int[N];
        for(int i=0;i<N;i++){
            s[i]=i+1;
        }
	    int maxunderK=Integer.MIN_VALUE;
        
         // Generate all pairs (i, j) where i < j
        for (int i = 0; i < s.length; i++) {
            for (int j = i + 1; j < s.length; j++) {
                int ans = s[i] & s[j]; // Calculate the bitwise AND
                if (ans < K) { // Check if the result is less than K
                    maxunderK = Math.max(maxunderK, ans); // Update maxunderK if the current ans is greater
                }
            }
        }

        // Return the maximum AND value found that is less than K, or 0 if none found
        return (maxunderK != Integer.MIN_VALUE) ? maxunderK : 0;
    }
}
}
// 	    List<int[]> list=new ArrayList<>();

// 	    for(int i=0;i<s.length;i++){
// 	        for(int j=i+1;j<s.length;j++){
//                 list.add(new int[]{s[i],s[j]});
// 	        }
// 	    }
	    
// 	   // System.out.println("each");
// 	    for(int[] val:list){
// 	       // System.out.println(val[0]+""+val[1]);
// 	        int ans=val[0]&val[1];
// 	       // System.out.println(ans);
// 	      if(ans<K){
// 	          maxunderK=Math.max(maxunderK,ans);
// 	          System.out.println(maxunderK);
// 	      }
// 	     }
// 	      // Print the maximum AND value < k
//         if (maxunderK != Integer.MIN_VALUE) {
//             // System.out.println("Max AND value < " + k + ": " + maxunderK);
//         } else {
//             // System.out.println("No valid AND value found below " + k);
//             return 0;
//         }
// 	    }
      
       
//     }

// }

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int count = Integer.parseInt(firstMultipleInput[0]);

                int lim = Integer.parseInt(firstMultipleInput[1]);

                int res = Result.bitwiseAnd(count, lim);

                bufferedWriter.write(String.valueOf(res));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
